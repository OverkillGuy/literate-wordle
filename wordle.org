#+TITLE: Wordle

# Shell steps should show results verbatim (not tables) and don't rerun on export
#+PROPERTY: header-args:shell :results verbatim :eval no-export

Implementing the viral game "Wordle" in Python using literate programming!

Literate programming is the art of writing code as if it was a novel (or
blogpost), writing down what's needed, explaining the reasoning, and weaving in
code snippets that add up to the codebase as we grow in understanding. The
result is a "story" which can be read, but also "tangled" back into a proper
codebase that works normally.

I'll be making liberal use of Gherkin to describe what we're building.

* Mise en bouche: picking an answer

To get us started, let's cover the very first thing Wordle has to do: pick a
word that will become our answer:

#+CAPTION: Our first requirement
#+begin_src feature :tangle features/pick_answer_word.feature
Feature: Pick an answer word
  As the wordle game
  I need to pick a random 5 letter word
  In order to let players guess it
#+end_src

Right. That's fairly straightforward, but the secret word can't be random
characters, it needs to be a proper word. So we need to find a dictionary to
pick from.
** Solution dictionary file
Since we're trying to match the Wordle website, let's use Wordle's own
dictionary. Someone [[https://raw.githubusercontent.com/AllValley/WordleDictionary/main/wordle_solutions_alphabetized.txt][helpfully uploaded it]]. We'll need to download it locally
first:

#+begin_src shell :tangle no
wget \
    --output-document "src/literate_wordle/wordle_answers_dict.txt" \
    "https://raw.githubusercontent.com/AllValley/WordleDictionary/6f14d2f03d01c36fe66e3ccc0929394251ab139d/wordle_solutions_alphabetized.txt"
#+end_src

#+RESULTS:

Except an alphabetically sorted text file takes a lot of space but compresses
really well: let's compress that instead

#+begin_src shell :tangle no
ANSWERS_FILE="src/literate_wordle/wordle_answers_dict.txt"
ls -hal "${ANSWERS_FILE}"
gzip "$ANSWERS_FILE"
ls -hal "${ANSWERS_FILE}.gz"
# Unnecessary: gzip removes the original as it compresses
# rm "$ANSWERS_FILE"
#+end_src

#+RESULTS:
: -rw-rw-r-- 1 jiby jiby 16K Feb 16 00:45 src/literate_wordle/wordle_answers_dict.txt
: -rw-rw-r-- 1 jiby jiby 6.2K Feb 16 00:45 src/literate_wordle/wordle_answers_dict.txt.gz

Sweet, we have cut down by ~two thirds the filesize.

Now, let's use Test-Driven Development to guide us towards picking an answer
word.

** TDD for picking word functionality

#+begin_src python :tangle tests/test_pick_word.py
"""
Feature: Pick an answer word
  As the wordle game
  I need to pick a random 5 letter word
  In order to let players guess it
"""

from literate_wordle.words import pick_answer_word


def test_pick_word_ok_length():
    """Confirm a wordle solution is of right size"""
    assert len(pick_answer_word()) == 5, "Picked wordle solution is wrong size!"
#+end_src

Of course, since that feature isn't implemented (not even the skeleton), running
tests right now would crash, not just give a red light. So let's implement the
barest hint of a function that returns the wrong thing, to make the test run but
fail:

First, the docstring for a new python module =words.py=

#+begin_src python :tangle src/literate_wordle/words.py
"""Dictionary features to back wordle solutions"""
#+end_src

In that module, let's add the skeleton for our =pick_answer_word= function, but
return an invalid result, to make test explicitly fail:

#+begin_src python :tangle src/literate_wordle/words.py
def pick_answer_word() -> str:
    """Pick a Wordle solution/answer from wordle dictionary"""
    return ""  # Incorrect solution to get RED test
#+end_src

With our test ready, and a dummy function in place, let's see the tests go red:


#+begin_src shell :exports both
make test 2>&1 || true
#+end_src

#+RESULTS:
#+begin_example
poetry run pytest
============================= test session starts ==============================
platform linux -- Python 3.9.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- /home/jiby/dev/ws/short/literate_wordle/.venv/bin/python
cachedir: .pytest_cache
rootdir: /home/jiby/dev/ws/short/literate_wordle, configfile: pyproject.toml
plugins: cov-3.0.0, datadir-1.3.1, clarity-1.0.1
collecting ... collected 2 items

tests/test_pick_word.py::test_pick_word_ok_length FAILED                 [ 50%]
tests/test_version.py::test_version PASSED                               [100%]

=================================== FAILURES ===================================
___________________________ test_pick_word_ok_length ___________________________

    def test_pick_word_ok_length():
        """Confirm a wordle solution is of right size"""
>       assert len(pick_answer_word()) == 5, "Picked wordle solution is wrong size!"
E       AssertionError: Picked wordle solution is wrong size!
E       assert == failed. [pytest-clarity diff shown]
E
E         LHS vs RHS shown below
E
E         0
E         5
E

tests/test_pick_word.py:13: AssertionError
- generated xml file: /home/jiby/dev/ws/short/literate_wordle/test_results/results.xml -
=========================== short test summary info ============================
FAILED tests/test_pick_word.py::test_pick_word_ok_length - AssertionError: Pi...
========================= 1 failed, 1 passed in 0.07s ==========================
make: *** [Makefile:16: test] Error 1
#+end_example

